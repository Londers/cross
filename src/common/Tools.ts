//переход на автоматическое регулирование по 0
import {DeviceError, DispatchCommand, Model} from "./index";

export const PhaseCommandType = 9

export const getDescription = (status: boolean, command: DispatchCommand) => {
    if (!status) return "Отсутствует связь с сервером"
    switch (command.cmd) {
        case 4:
            if (command.param === 1) {
                return 'Отправлен запрос на смену фаз';
            } else {
                return 'Отключить запрос на смену фаз';
            }
        case 5:
            if (command.param === 0) return 'Отправлена команда "Переход на автоматическое регулирование ПК"';
            return `Отправлена команда "Сменить ПК на №${command.param}"`;
        case 6:
            if (command.param === 0) return 'Отправлена команда "Переход на автоматическое регулирование СК"';
            return `Отправлена команда "Сменить CК на №${command.param}"`;
        case 7:
            if (command.param === 0) return 'Отправлена команда "Переход на автоматическое регулирование НК"';
            return `Отправлена команда "Сменить НК на №${command.param}"`;
    }
    switch (command.param) {
        case 0:
            return 'Отправлена команда "Локальный режим"';
        case 9:
            return 'Отправлена команда "Координированное управление"';
        case 10:
            return 'Отправлена команда "Включить жёлтое мигание"';
        case 11:
            return 'Отправлена команда "Отключить светофоры"';
    }
    return `Отправлена команда "Включить фазу №${command.param}"`;
}

// Расшифровка типа устройства
export const switchArrayTypeFromDevice = (model: Model | undefined) => {
    if (!model) return ""
    if (model.C12) return "С12УСДК"
    if (model.DKA) return "ДКА"
    if (model.DTA) return "ДТА"
    return "УСДК"
}

const mErrorText = new Map<number, string>([
    [0, "Ошибок в процессе соединения с сервером не было зарегистрировано"],
    [1, "Не было обмена или некорректный обмен с модемом"],
    [2, "Не удалось зарегистрироваться в GSM-сети за отведенный интервал времени"],
    [3, "Не удалось войти в GPRS-канал за отведённый интервал времени"],
    [4, "Не было соединения с сервером после нескольких попыток"],
    [5, "Sim-карта не была установлена"],
    [6, "Не было ответов от сервера при попытке подключения"],
    [7, "Не было ответов от сервера при попытке подключения"],
    [8, "Сервер разорвал предыдущее соединение"],
    [9, "Модем не подчинился сигналу включения/выключения"],
    [10, "Не было связи с сервером"],
    [11, "Неверная контрольная сумма принимаемого сообщения"],
    [12, "Не было подтверждения от сервера на прием информации от УСКД"],
    [16, "Внутренняя ошибка модема"],
    [20, "Были получены новые параметры обмена с сервера"],
    [21, "Таймаут по отсутствию связи с сервером"],
    [22, "Было получено СМС с настройками"],
    [23, "Произошла перезагрузка по пропаданию и восстановлению сетевого питания"],
    [24, "Было обновление программы"],
    [25, "Не было данных с сервера в режиме обмена"],
    [26, "Произошла суточная перезагрузка"],
    [27, "Произошло несанкционированное выключение модема"],
    [28, "Был загружен новый IP-адрес сервера по USB"],
    [29, "Произошел тайм-аут при установлении соединения"],
    [50, "Не было данных от сервера в течение интервала обмена  +1 минута"],
    [51, "Был разрыв связи по команде ПСПД"],
    [52, "Модем выдал сообщение об ошибке в процессе обмена"],
    [53, "Сброс от контроллера Ethernet"],
    [54, "Самопроизвольный сброс"],
    [55, "Отказ оборудования"],
    [56, "Переполнение стека"],
])

const ErrorsText = new Map<string, string>([
    ["V220DK1", "220В ДК1"],
    ["V220DK2", "220В ДК2"],
    ["RTC", "Часы RTC"],
    ["TVP1", "ТВП1"],
    ["TVP2", "ТВП2"],
    ["FRAM", "FRAM"],
])

export const checkMalfunction = (error: DeviceError | undefined) => {
    let retValue = "";
    if (!error) return retValue
    for (const [key, value] of Object.entries(error)) {
        if (value) retValue += ErrorsText.get(key) + ", ";
    }
    return (retValue.length !== 0) ? ("неисправности " + retValue.substring(0, retValue.length - 2)) : "";
}

export const checkError = (deviceError: DeviceError | undefined, elc: number, malfunction: boolean) => {
    const err = mErrorText.get(elc)
    if (malfunction) {
        return (err ? err : ("Неизвестный код неисправности " + elc)) + ", " + checkMalfunction(deviceError)
    } else {
        return (err ? err : ("Неизвестный код неисправности " + elc))
    }
}